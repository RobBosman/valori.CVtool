########################################################################################################################
# Docker
########################################################################################################################

# Build and publish docker image.
docker build -t bransom/cvtool .
docker push bransom/cvtool

# Install MongoDB and CVtool and run letsencrypt to obtain SSL certs. (Restart CVtool server to load a new certificate.)
docker pull bransom/cvtool
docker-compose -f docker-compose.yaml --env-file=/secret/.env up -d
docker container prune -f
docker image prune -f

# Initialize MongoDB.
docker exec -it \
    $(docker ps -aqf "name=mongo") \
	bash
# FOR /F "usebackq delims=" %A IN (`docker ps -aqf "name=mongo"`) DO docker exec -it %A bash
mongo --shell mongodb://root:MongoPassword@mongodb:27017/cvtool?authSource=admin
    use cvtool
    db.experience.createIndex({"$**":"text"})
    db.skill.createIndex({"description.nl_NL":"text", "description.uk_UK":"text"})
    exit

# Restart CVtool server to load a new certificate.
docker container restart "$(docker ps -aqf 'name=bransom/cvtool')"


########################################################################################################################
# BACKUP/RESTORE (see scripts/cvtool_backup.sh)
########################################################################################################################
lftp
    set ftp:ssl-allow true
    set ssl:verify-certificate no
    open -u VCV01,WYenU7hKxnet3vyD 157.97.115.138
	exit


# Docker Desktop volumes
\\wsl$\docker-desktop-data\version-pack-data\community\docker\volumes

docker run -it --rm \
    --mount type=volume,source=root_mongodb_backup,target=/backup \
    mongo \
    bash
# FOR /F "usebackq delims=" %A IN (`docker ps -aqf "name=mongo"`) DO docker exec -it %A bash
mongodump --uri=mongodb://root:MongoPassword@mongodb:27017/cvtool?authSource=admin --gzip --out=/backup/2020-12-31
mongorestore --uri=mongodb://root:MongoPassword@mongodb:27017/cvtool?authSource=admin --drop --preserveUUID --gzip /backup/2020-12-31


########################################################################################################################
# MongoDB import/export
########################################################################################################################
# Collections:
#   businessUnit
#   account
#   authorization
#   role
#   cv
#   education
#   skill
#   publication
#   reference
#   experience
mongoimport --uri mongodb://localhost:27017/cvtool --jsonArray --stopOnError --mode=upsert --file=skill.json
mongoexport --uri mongodb://localhost:27017/cvtool --jsonArray --collection=skill --out=skill.json

FOR /R %i IN (exported\json\*.json) DO mongoimport --file=%i --jsonArray --stopOnError --mode=upsert --uri mongodb://localhost:27017/cvtool
ls -1 exported\json\*.json | while read jsonfile; do --file=$jsonfile --jsonArray --stopOnError --mode=upsert --uri mongodb://localhost:27017/cvtool; done


mongo --shell mongodb://root:MongoPassword@mongodb:27017/cvtool?authSource=admin
    use cvtool
    db.education.updateMany({}, {$rename: {"year": "yearTo"}})
    db.account.updateMany({}, {$unset: {"privileges": ""}})
    db.skill.updateMany({ category:  {$nin: ["LANGUAGES", "BRANCHES", "EXPERTISE", "PROGRAMMING", "TOOLS", "METHODS", "DATABASES", "APPLICATIONS", "OS_NETWORKS"] } }, { $set: { category: "EXPERTISE" } })
    db.role.renameCollection("authorization")

    db.experience.find({$text: {$search: "c#"}}, {score: {$meta: "textScore"}}).sort({score: {$meta: "textScore"}})
    db.skill.find({$text: {$search: "c#"}})
    db.skill.find({$text: {$search: "c#"}}, {score: {$meta: "textScore"}}).sort({score: {$meta: "textScore"}})


########################################################################################################################
# Docker stop and prune
########################################################################################################################
docker stop $(docker ps -aq)
docker rm $(docker ps -aq)
docker network prune -f
docker rmi -f $(docker images --filter dangling=true -qa)
# Armageddon!
docker volume rm $(docker volume ls --filter dangling=true -q)
docker rmi -f $(docker images -qa)
