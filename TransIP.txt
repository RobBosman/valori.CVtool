########################################################################################################################
# INSTALL ubuntu 20.04 - cvtool.valori.nl
########################################################################################################################
apt-get -y update
apt-get -y upgrade

apt-get -y install fail2ban

# Configure firewall.
# Whitelist IP-numbers for SSH:
#   85.146.18.88/32 (Rob thuis)
#   157.97.115.136/29 (Valori kantoor)
#   145.131.215.232/29 (Skyliner kantoor, daar zit Luke vaak)
#   2a02:22a0:bbb6:1602::/64 (Skyliner kantoor IPv6)
apt-get -y install ufw
ufw default deny incoming
ufw default allow outgoing
ufw allow from 85.146.18.88/32 to any port 22
ufw allow from 157.97.115.136/29 to any port 22
ufw allow from 145.131.215.232/29 to any port 22
ufw allow from 2a02:22a0:bbb6:1602::/64 to any port 22
ufw allow 443/tcp
ufw allow 80/tcp
ufw allow from 85.146.18.88 to any port 27017
ufw enable

# Install Docker.
apt-get -y install docker.io
systemctl enable --now docker
usermod -aG docker rbosman

# Install docker-compose.
curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" \
    -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# login to DockerHub
docker login -u bransom
# NOTE: remove pwd from /root/.docker/config.json

# Prepare secret config file.
mkdir -p /secret
cp ~bosmanr/.env /secret
chmod -R 400 /secret
cp ~bosmanr/docker-compose.yml .



########################################################################################################################
# Docker
########################################################################################################################
# Build and publish docker image.
docker build -t bransom/cvtool .
docker push bransom/cvtool


# Deploy docker image locally.
docker-compose -f docker-compose.yaml --env-file=secret/.env up -d
docker container prune -f
docker image prune -f


# Install MongoDB and CVtool and run letsencrypt to obtain SSL certs. (You must restart CVtool afterward.)
docker pull bransom/cvtool
docker-compose -f docker-compose.yaml --env-file=/secret/.env up -d
docker container prune -f
docker image prune -f


########################################################################################################################
# Docker stop and prune
########################################################################################################################
docker stop $(docker ps -aq)
docker rm $(docker ps -aq)
docker network prune -f
docker rmi -f $(docker images --filter dangling=true -qa)
########################################################################################################################
# Docker armageddon
########################################################################################################################
docker volume rm $(docker volume ls --filter dangling=true -q)
docker rmi -f $(docker images -qa)


docker run -it --rm ^
    --mount type=volume,source=valoricvtool_mongodb_backup,target=/backup ^
    mongo ^
    bash
docker run -it --rm \
    --mount type=volume,source=root_mongodb_backup,target=/backup \
    mongo \
    bash

FOR /F "usebackq delims=" %A IN (`docker ps -aqf "name=mongo"`) DO docker exec -it %A ^
    mongodump --out=/backup/2020-12-13 --gzip --uri=mongodb://root:MongoPassword@mongodb:27017/cvtool?authSource=admin

docker exec -it ^
    $(docker ps -aqf "name=mongo") ^
    mongodump --out=/backup/2020-12-13 --gzip --uri=mongodb://root:MongoPassword@mongodb:27017/cvtool?authSource=admin



########################################################################################################################
# BACKUP/RESTORE (see scripts/cvtool_backup.sh)
########################################################################################################################
lftp
    set ftp:ssl-allow true ;\
    set ssl:verify-certificate no ;\
    open -u VCV01,WYenU7hKxnet3vyD 157.97.115.138


mongodump /out:/backup/2020-12-12 /gzip /uri:mongodb://localhost:27017/cvtool

mongorestore /drop /preserveUUID /dir:/backup/2020-12-12 /gzip /uri:mongodb://localhost:27017/cvtool
mongorestore /drop /preserveUUID /dir:/backup/2020-12-12 /gzip /uri:mongodb://root:MongoPassword@127.0.0.1:27117/cvtool?authSource=admin


# MongoDB collections:
#   businessUnit
#   account
#   role
#   cv
#   education
#   skill
#   publication
#   reference
#   experience
mongoimport --uri mongodb://localhost:27017/cvtool --jsonArray --stopOnError --mode=upsert --file=skill.json
mongoexport --uri mongodb://localhost:27017/cvtool --jsonArray --collection=skill --out=skill.json

# MongoSH:
use cvtool
db.education.updateMany({}, {$rename: {"year": "yearTo"}})
db.account.updateMany({}, {$unset: {"privileges": ""}})
db.skill.updateMany({ category:  {$nin: ["LANGUAGES", "BRANCHES", "EXPERTISE", "PROGRAMMING", "TOOLS", "METHODS", "DATABASES", "APPLICATIONS", "OS_NETWORKS"] } }, { $set: { category: "EXPERTISE" } })
db.role.renameCollection("authorization")


# FOR /R %i IN (exported\json\*.json) DO mongoimport --file=%i --jsonArray --stopOnError --mode=upsert --uri mongodb://localhost:27017/cvtool
# FOR /R %i IN (exported\json\*.json) DO mongoimport --file=%i --jsonArray --stopOnError --mode=upsert --uri mongodb://root:MongoPassword@127.0.0.1:27117/cvtool?authSource=admin
# ls -1 exported\json\*.json | while read jsonfile; do --file=$jsonfile --jsonArray --stopOnError --mode=upsert --uri mongodb://localhost:27017/cvtool; done
